import {
  Public,
  AccountBalance,
  Bluetooth,
  MusicNote,
  SmartToy,
} from '@mui/icons-material';

export const projectsData = [
  {
    id: 1,
    title: 'AstroWEB3 - AI Governance Agent for AImerica',
    subtitle: 'Distributed AI Agent for Resource Management & Governance',
    description:
      'Deployed AstroWEB3, a sophisticated AI governance agent on the AImerica Solana ecosystem. This revolutionary system oversees the distribution of computational power, energy, and resources to ensure equitable access for all citizens, preventing hoarding and implementing algorithmic fairness at a nation-scale level.',
    longDescription:
      "AstroWEB3 represents Precious E. Okoyen's pioneering work in AI governance systems - the first AI agent designed to manage resource distribution for an entire digital nation. Built on Solana blockchain infrastructure, it uses advanced machine learning algorithms to monitor resource usage, predict citizen needs, and enforce anti-hoarding mechanisms. The system embodies post-scarcity economics principles, ensuring AImerica's abundance is shared equitably rather than concentrated. This groundbreaking project demonstrates the practical application of AI in governance, blockchain-based resource management, and the creation of truly democratic digital societies.",
    image: '/images/projects/astroweb3.jpg',
    technologies: [
      'Solana',
      'Rust',
      'AI Governance',
      'Machine Learning',
      'Web3.js',
      'React',
      'Python',
      'Distributed Systems',
      'Smart Contracts',
      'Real-time Analytics',
    ],
    category: 'Web3',
    status: 'Production',
    featured: true,
    liveUrl: 'https://astroweb3.uai.sol.build/',
    icon: <AccountBalance />,
    keyFeatures: [
      'AI-powered resource distribution',
      'Real-time governance monitoring',
      'Anti-hoarding enforcement algorithms',
      'Citizen service delivery automation',
      'Predictive resource allocation',
      'Blockchain-based transparency',
      'Equitable access enforcement',
      'Nation-scale AI governance',
    ],
    metrics: {
      governance: 'Nation-scale',
      uptime: '24/7 Monitoring',
      citizens: 'AImerica Population',
      resources: 'Multi-resource management',
    },
    challenges: [
      'Implementing algorithmic fairness at scale',
      'Balancing efficiency with equity in resource allocation',
      'Creating transparent AI decision-making processes',
      'Ensuring robust governance in decentralized systems',
    ],
    learnings: [
      'AI governance system architecture',
      'Post-scarcity economic modeling',
      'Blockchain-based resource management',
      'Large-scale social AI implementation',
    ],
  },
  {
    id: 2,
    title: 'deCentra - Censorship-Resistant Social Network',
    subtitle: 'Decentralized Web3 Social Platform on Internet Computer',
    description:
      'deCentra, a fully decentralized, censorship-resistant social network built 100% on the Internet Computer Protocol (ICP). Unlike traditional platforms, all user data, posts, and interactions are stored on-chain using immutable canister smart contracts, making censorship impossible and user privacy paramount.',
    longDescription:
      "deCentra represents my vision for the future of social media - a platform where governments can't ban users, corporations can't sell user data, and communities govern themselves. Built entirely on ICP using Rust canisters for the backend and Next.js for the frontend, it features Internet Identity authentication, comprehensive privacy controls, and a sophisticated social graph system. The project showcases enterprise-grade Rust development with zero-tolerance for .unwrap(), comprehensive input validation, rate limiting, and XSS prevention.",
    image: '/images/projects/decentra_social.png',
    technologies: [
      'Rust',
      'Internet Computer Protocol',
      'IC-CDK',
      'Next.js 15',
      'TypeScript',
      'Internet Identity',
      'Candid',
      'Radix UI',
      'Tailwind CSS',
      'DFX',
    ],
    category: 'Web3',
    status: 'Development',
    featured: true,
    githubUrl: 'https://github.com/Chymezy/deCentra',
    demoUrl: 'https://dorahacks.io/navi?to=%2Fbuidl%2F28565%2F', // Will be updated with canister URL when deployed
    icon: <Public />,
    keyFeatures: [
      'Fully decentralized architecture',
      'Censorship-resistant content storage',
      'Internet Identity authentication',
      'On-chain social graph',
      'Privacy-first design',
      'DAO governance (planned)',
      'Creator monetization with ICP',
      'Whistleblower protection tools',
    ],
    metrics: {
      commits: '50+',
      contributors: '3',
      codeQuality: 'Enterprise',
      languages: '5',
    },
    challenges: [
      'Implementing enterprise-grade security on-chain',
      'Optimizing canister cycle consumption',
      'Building intuitive UX for Web3 authentication',
      'Ensuring data sovereignty and privacy',
    ],
    learnings: [
      'Advanced Rust development for blockchain',
      'Internet Computer Protocol architecture',
      'Decentralized identity management',
      'Web3 application security patterns',
    ],
  },
  {
    id: 3,
    title: 'BlueChat - Browser-Based Bluetooth Messaging',
    subtitle: 'Peer-to-Peer Communication via Web Bluetooth API',
    description:
      'Engineered BlueChat, an innovative browser-based Bluetooth messaging application that enables direct device-to-device communication using the cutting-edge Web Bluetooth API. This revolutionary app allows users to scan, connect, and exchange messages with nearby Bluetooth Low Energy devices without requiring internet connectivity or app installation.',
    longDescription:
      "BlueChat represents Precious E. Okoyen's pioneering work in browser-device integration, leveraging the emerging Web Bluetooth API to create peer-to-peer communication solutions. Built with TypeScript and modern web standards, the application features real-time chat interface, device discovery, secure BLE connections, and offline-first architecture. This project demonstrates advanced browser API usage, type-safe Bluetooth service implementation, and innovative solutions for emergency communications, IoT device control, and privacy-focused messaging without traditional server infrastructure.",
    image: '/images/projects/bluechat.avif',
    technologies: [
      'TypeScript',
      'Web Bluetooth API',
      'HTML5',
      'CSS3',
      'Express.js',
      'Node.js',
      'Bluetooth Low Energy',
      'Progressive Web App',
      'ES2020 Modules',
      'Responsive Design',
    ],
    category: 'Web',
    status: 'Development',
    featured: true,
    githubUrl: 'https://github.com/x17green/blue-chat',
    icon: <Bluetooth />,
    keyFeatures: [
      'Browser-native Bluetooth communication',
      'Peer-to-peer messaging without internet',
      'Real-time device discovery and pairing',
      'Type-safe Bluetooth service architecture',
      'Responsive chat interface with animations',
      'Offline-first communication',
      'Zero-installation web application',
      'Emergency communication capability',
    ],
    metrics: {
      technology: 'Web Bluetooth API',
      platform: 'Browser-native',
      connectivity: 'P2P Messaging',
      devices: 'BLE Compatible',
    },
    challenges: [
      'Implementing cutting-edge Web Bluetooth API',
      'Creating reliable device discovery and pairing',
      'Building browser-native BLE communication',
      'Designing offline-first messaging architecture',
    ],
    learnings: [
      'Advanced Web Bluetooth API implementation',
      'Peer-to-peer communication protocols',
      'Browser-device integration patterns',
      'Emergency communication system design',
    ],
  },
  {
    id: 4,
    title: 'Afro Lyrics Mania',
    subtitle: 'Enterprise Music Platform for African Music Culture',
    description:
      'Afro Lyrics Mania is a comprehensive full-stack music platform celebrating African music culture. This enterprise-grade application combines music streaming, lyrics management, and social features in a scalable, secure architecture designed to democratize African music discovery and accessibility.',
    longDescription:
      "ALM Complete represents Precious E. Okoyen's commitment to celebrating African music heritage through technology. Built with a modern tech stack featuring Node.js, Express.js, React, and MongoDB, this enterprise-grade platform addresses the underrepresented African music market. The application features sophisticated architecture with JWT authentication, Spotify API integration, Redis caching, and comprehensive security measures. It demonstrates advanced full-stack development skills with clean MVC architecture, proper error handling, rate limiting, and professional logging. The platform serves as both a music streaming service and a lyrics management system, enabling artists to publish and manage their content while providing users with an immersive African music experience.",
    image: '/images/projects/alm-complete.jpg',
    technologies: [
      'Node.js',
      'Express.js',
      'React',
      'TypeScript',
      'MongoDB',
      'Mongoose',
      'Material-UI',
      'Next.js',
      'Redis',
      'JWT',
      'Spotify API',
      'Winston',
      'Helmet',
      'Bcrypt',
      'Multer',
    ],
    category: 'Web',
    status: 'Development',
    featured: false,
    githubUrl: 'https://github.com/x17green/alm-complete',
    icon: <MusicNote />,
    keyFeatures: [
      'Full-stack music streaming platform',
      'Enterprise-grade security implementation',
      'Spotify API integration',
      'African music focus and cultural celebration',
      'Advanced lyrics management system',
      'JWT-based authentication',
      'Redis caching for performance',
      'Rate limiting and security middleware',
      'Professional logging with Winston',
      'TypeScript integration for type safety',
      'Material-UI design system',
      'RESTful API architecture',
    ],
    metrics: {
      architecture: 'Enterprise MVC',
      security: 'Multi-layer Protection',
      performance: 'Redis Optimized',
      cultural: 'African Music Focus',
    },
    challenges: [
      'Implementing enterprise-grade security layers',
      'Integrating multiple music service APIs',
      'Building scalable caching architecture',
      'Creating culturally authentic user experience',
      'Optimizing performance for music streaming',
    ],
    learnings: [
      'Enterprise Node.js application architecture',
      'Advanced security implementation patterns',
      'Music streaming API integration',
      'Cultural sensitivity in software design',
      'Performance optimization for media applications',
    ],
  },
  {
    id: 5,
    title: 'AI-Powered Movie Chatbot',
    subtitle: 'Intelligent Movie Discovery with Weather-Based Recommendations',
    description:
      'An innovative AI-powered chatbot that revolutionizes movie discovery through intelligent conversation and weather-aware recommendations. This full-stack application integrates multiple AI services including OpenAI GPT and Google Gemini with real-time weather data to provide personalized movie suggestions based on current atmospheric conditions.',
    longDescription:
      "The AI Movie Chatbot represents Precious E. Okoyen's expertise in modern AI integration and conversational interfaces. This sophisticated application combines multiple cutting-edge technologies including OpenAI GPT API, Google Gemini, TheMovieDB API, and OpenWeatherMap API to create a unique movie discovery experience. The system features weather-based recommendation algorithms, real-time geolocation services, and advanced natural language processing. Built with TypeScript throughout for enterprise-grade type safety, the application demonstrates professional full-stack development with React frontend, Express.js backend, MongoDB persistence, and Firebase authentication. The project showcases innovative UX design with Framer Motion animations, comprehensive testing strategies, and multi-platform deployment capabilities including Docker containerization and support for Vercel, Back4app, and Parse platforms.",
    image: '/images/projects/ai-movie-chatbot.png',
    technologies: [
      'React',
      'TypeScript',
      'Node.js',
      'Express.js',
      'MongoDB',
      'OpenAI API',
      'Google Gemini API',
      'TheMovieDB API',
      'OpenWeatherMap API',
      'Firebase Authentication',
      'Tailwind CSS',
      'Framer Motion',
      'Jest',
      'Docker',
      'Axios',
      'Memory Cache',
    ],
    category: 'AI/ML',
    status: 'Production',
    featured: false,
    githubUrl: 'https://github.com/x17green/AI-Powered-Chatbot',
    icon: <SmartToy />,
    keyFeatures: [
      'Multi-AI provider integration (OpenAI + Google Gemini)',
      'Weather-based movie recommendation algorithm',
      'Real-time conversational movie discovery',
      'Geolocation-aware suggestions',
      'Firebase authentication system',
      'Responsive chat interface with animations',
      'TypeScript throughout for type safety',
      'Memory caching for optimized performance',
      'Docker containerization',
      'Comprehensive testing with Jest',
      'Multi-platform deployment support',
      'Professional documentation and roadmap',
    ],
    metrics: {
      aiProviders: 'Multi-AI Integration',
      apis: '5+ External APIs',
      testing: 'Jest + React Testing Library',
      deployment: 'Multi-platform Ready',
    },
    challenges: [
      'Integrating multiple AI providers with fallback mechanisms',
      'Creating weather-to-movie recommendation algorithms',
      'Building responsive real-time chat interface',
      'Implementing geolocation-based services',
      'Managing complex API orchestration and error handling',
    ],
    learnings: [
      'Advanced AI API integration patterns',
      'Conversational interface design principles',
      'Weather data processing and analysis',
      'Multi-provider AI architecture strategies',
      'Real-time chat application development',
    ],
  },
];

export const categories = [
  { name: 'All', value: 'all' },
  { name: 'Web3', value: 'Web3' },
  { name: 'AI Governance', value: 'AI Governance' },
  { name: 'AI/ML', value: 'AI/ML' },
  { name: 'Web Development', value: 'Web' },
  { name: 'Mobile', value: 'Mobile' },
  { name: 'Data Science', value: 'Data' },
];

export const technologies = [
  'Rust',
  'Solana',
  'Internet Computer Protocol',
  'Python',
  'Machine Learning',
  'AI Governance',
  'TensorFlow',
  'PyTorch',
  'React',
  'Next.js',
  'TypeScript',
  'Web Bluetooth API',
  'Bluetooth Low Energy',
  'Node.js',
  'FastAPI',
  'PostgreSQL',
  'MongoDB',
  'AWS',
  'Docker',
  'Kubernetes',
  'OpenAI API',
  'Transformers',
  'scikit-learn',
  'Pandas',
  'NumPy',
  'Redis',
  'Elasticsearch',
];

export const getProjectsByCategory = category => {
  if (category === 'all') return projectsData;
  return projectsData.filter(project => project.category === category);
};

export const getFeaturedProjects = () => {
  return projectsData.filter(project => project.featured);
};

export const getProjectById = id => {
  return projectsData.find(project => project.id === parseInt(id));
};

export const getProjectsByTechnology = tech => {
  return projectsData.filter(project =>
    project.technologies.some(technology =>
      technology.toLowerCase().includes(tech.toLowerCase())
    )
  );
};
